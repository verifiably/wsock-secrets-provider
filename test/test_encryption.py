#!/usr/bin/env python3

import base64
from verifiably_wsock_secrets_provider import credentials_provider


EXAMPLE_ATT_DOC = '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'

def test_secrets_encryption():

    credentials = {'data': '123'}
    expected_pcrs = {'0': '123'}


    secrets_provider = credentials_provider.SecretsProvider(credentials, expected_pcrs)

    encrypted_secrets = secrets_provider.encrypt_credentials(EXAMPLE_ATT_DOC)

    assert type(encrypted_secrets) is str

    cipherdata = base64.b64decode(encrypted_secrets)

    assert type(cipherdata) is bytes
